
Create and Store Credentials Securely
1.0.0 Install packets
1.1.0 Store Credentials Securely
1.2.0 Create token generator

Install npm packets
$ npm install --save twilio @twilio/conversations

Set up tokens and confidential data
/config/keys.js
if (process.env.NODE_ENV === 'production') {
    // production credentials
    module.exports = require('./prod')
} else {
    // development credentials
    module.exports = require('./dev')
}

/config/dev.js
module.exports = {
    identity: 'HANDLE_NAME',
    serviceSid: 'ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioAccountSid: 'ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioApiKey: 'SKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioApiSecret: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioAuthToken: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioPhoneNumber: '+10000000000',
    twilioUrl: 'https://conversations.twilio.com/v1/Conversations'
}

/config/prod.js
module.exports = {
    // HANDLE_NAME
    identity: process.env.IDENTITY,
    
    // ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    serviceSid: process.env.SERVICE_SID,

    // ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    twilioAccountSid: process.env.TWILIO_ACCOUNT,

    // SKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    twilioApiKey: process.env.TWILIO_API_KEY,

    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    twilioApiSecret: process.env.TWILIO_API_SECRETE,

    // XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    twilioAuthToken: process.env.TWILIO_AUTH_TOKEN,

    // +10000000000
    twilioPhoneNumber: process.env.TWILIO_PHONE_NUMBER,

    // https://conversations.twilio.com/v1/Conversations
    twilioUrl: process.env.TWILIO_URL
}

Set up tokens and confidential data in the client folder
Since the React can't reach files outside of the `src` folder we'll duplicated the files in a path it can reach. Create a folder and call it `utils`. We're going to need them when we create a `get-tokens.js` module we'll create next.

Add the same `dev.js` file
/client/src/utils/dev.js
module.exports = {
    identity: 'HANDLE_NAME',
    serviceSid: 'ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioAccountSid: 'ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioApiKey: 'SKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioApiSecret: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioAuthToken: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    twilioPhoneNumber: '+10000000000',
    twilioUrl: 'https://conversations.twilio.com/v1/Conversations'
}


Add the same `.js` file
/client/src/utils/keys.js
if (process.env.NODE_ENV === 'production') {
    // production credentials
    module.exports = require('./prod')
} else {
    // development credentials
    module.exports = require('./dev')
}


Create or update `.gitignore` file
We're going to set our gitignore file to avoid uploading sensative data to GitHub - like `dev.js` for example. This creates an issue were if we want to connect our app to a host that automatically publishes from a GitHub branch. It can't find the credentials since they were never uploaded. To solve this problem, we use key.js to act like a switch.

If the app knows it's running on a production environment it tells the server to look at the prod.js, which in turn tells the server to look at it's evironment variables. This way, we're free to develope locally while keeping our credentials safe from the internet and prepare our app for deployment.

## create token
a new `get-tokens.js`
/client/src/utils/get-tokens.js
